/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const fs = require("fs");
  const app = express();
  const port = 3000;
  const path = require('path');
  
  app.use(bodyParser.json());  
  let dataList = [];

  //to send the HTML file
  app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, "index.html"));
  })
  
  // to get all the todo data
  app.get('/todos',(req, res) => {
    res.json(dataList);
  })
  
  // retrieve a specific todo task
  app.get('/todos/:id', (req, res) => {
    const _id = req.params.id;
    let present = false;
    let _task;
    for(let task of dataList){
      if(parseInt(_id) === task.id){
        present = true;
        _task = task;
        break;
      }
    }
    if(present){
      res.send(_task);
    }else{
    res.status(404).send("task not found");
    }
  })
  
  

  
  // to add the todo data to the data list
  app.post('/todos', (req, res) => {
    const randNum = Math.floor(Math.random()*1000000 + 1);
    todoData = {
      title:  req.body.title,
      description : req.body.description,
      id: randNum,
      completed : false
    }
    dataList.push(todoData)
    res.send(dataList)
  })
  
  // to delete a task by index number
  app.delete('/todos/:id', (req, res) => {
    const delId = parseInt(req.params.id);
    let del = -1;
    for(let i = 0; i < dataList.length; i++){
      if(dataList[i].id == delId){
        del = i;
        break;
      }
    }
    if(del != -1){
    dataList.splice(del , 1);
    res.send(dataList);
    } else{
      res.status(404).send("The task id entered is invalid");
    }
  })
  
  // update the status of completion of a task
  app.put('/todos/:id', (req, res) => {
    const _id = req.params.id;
    let present = false;
    for(let task of dataList){
      if(parseInt(_id) === task.id){
        task.completed = true;
        present = true;
        break;
      }
    }
    if(present){
      res.send(dataList);
    }else{
    res.status(404).send("task not found");
    }
  })
  
  
  
  app.listen(port, () => {
    console.log(`App listening on port ${port}`);
  })
  module.exports = app;
  